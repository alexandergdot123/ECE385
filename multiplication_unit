module multiply_unit(
    input logic clk,
    input logic [7:0] switches,
    input logic loadB,
    input logic exe,
    output logic [7:0] regB,
    output logic [7:0] regA,
    output logic [2:0] counter,
    output logic optional
);
    logic should_shift;
    logic M;
    logic [2:0] counter_state;
    

    assign optional = exe;
    three_bit_counter moore (
        .clk(clk),
        .reset(loadB),
        .load(exe),

        .out(counter_state)
    );
        
    logic counter_on;
    
    assign counter_on = counter_state[2]|counter_state[1]| counter_state[0] | exe;
    
    logic x_reg;
    logic [7:0] regAoutput;
    logic [7:0] regAinput;
    
    load_reg registerA(
        .clk(clk),
        .reset(loadB),
        .load((M & counter_on) | exe),
        .shift(counter_on),
        .shift_in_bit(x_reg),
        .data_i(regAinput),

        .data_q(regAoutput)
    );	

    assign regA = regAoutput;
    logic [8:0] add_unit_output;

    logic subtract;

    assign subtract = M & (counter_state == 3'b001); 
    logic cout;
      
    
    logic [8:0] addition_unit_bin;
    logic [8:0] addition_unit_ain;
    assign addition_unit_ain = (exe) ? 9'b000000000 : {regAoutput[7],regAoutput};
    assign addition_unit_bin = (M & counter_state == 3'b001)? ~{switches[7],switches} : {switches[7],switches};
    select_adder addition_unit(
        .a(addition_unit_ain),
        .b(addition_unit_bin),
        .cin(subtract),

        .s(add_unit_output),
        .cout(cout)
    );


    
    logic [7:0] regBout;
    
    logic bShiftIn;
    assign bShiftIn = (M)? add_unit_output[0]:regAoutput[0] & (~exe);
    load_reg registerB(
        .clk(clk),
        .reset(1'b0),
        .load(loadB),
        .shift(counter_on),
        .shift_in_bit(bShiftIn),
        .data_i(switches),

        .data_q(regBout)
    );	
    
    assign M = regBout[0];
    
    always_comb begin
        regAinput = (M) ? add_unit_output[8:1] :({8{~exe}}&{x_reg,regAoutput[7:1]});
    end

    always @(posedge clk) begin
        x_reg <= (M) ? add_unit_output[8] : x_reg & ~exe;
    end
    
    assign regB = regBout;
endmodule
