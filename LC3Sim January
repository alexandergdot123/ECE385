//module hello;
//	logic clk = 0;
//	logic reset = 1;
//	logic [15:0] pc = 16'b0011000000000001;
//	logic loadPC = 1;
//	logic memoryLoad = 1;
//	logic [15:0] Address = 16'b0010111111111111;
//	logic [15:0] Data = 16'b0011000000000000;
//	logic [5:0] state;
//	logic [15:0] MDR, MAR, MainBus, IR, PC, SR1;
//	logic [2:0] control;
//	always #5 clk = ~clk;
//	initial
//		begin
//			$display("Hello, world");
//			#10 Address = 16'b0011000000000000;
//			Data = 16'b0010000000100100;
//			#10 Address = 16'b0011000000000001;
//			Data = 16'b1110001111111111;
//			#10 Address = 16'b0011000000000010;
//			Data = 16'b0110010001111111;
//			#10 Address = 16'b0011000000000011;
//			Data = 16'b0001010010100011;
//			#10 Address = 16'b0011000000000100;
//			Data = 16'b1010011111111010;
//			#10 Address = 16'b0011000000000101;
//			Data = 16'b0101100010000011;
//			#10 Address = 16'b0011000000000110;
//			Data = 16'b1011100111111000;
//			#10 Address = 16'b0011000000000111;
//			Data = 16'b0111100001111111;
//			#10 Address = 16'b0011000000001000;
//			Data = 16'b0010101111110110; 
//			#10 Address = 16'b0011000000001001;
//			Data = 16'b1001101101111111; 
//			#10 reset = 0;
//			memoryLoad = 0;
//			loadPC = 0;
//			#10000 $finish;
			
//		end
//    LC3Simulation oopsie (
//        .clk(clk),
//        .reset(reset),
//        .PEECEE(pc),
//        .LOADPC(loadPC),
//        .memload(memoryLoad),
//        .memloadAddress(Address),
//        .memloadBits(Data),
//        .stateOutput(state),
//        .mainBusOutput(MainBus),
//        .MAROutput(MAR),
//        .MDROutput(MDR),
//        .PCOutput(PC),
//        .IROutput(IR),
//        .SR1Output(SR1),
//        .control(control)
//    );

//	initial 
//		$monitor("At time %t, MainBus = %h , PC = %h, MDR = %h, MAR = %h, IR = %h, state = %0d, SR1 = %h, control = %h", $time, MainBus,PC, MDR, MAR, IR, state, SR1, control);


//endmodule
module tb_processor_top;

	// Inputs
	logic clk;
	logic reset;
	logic run_i;
	logic continue_i;
	logic [15:0] sw_i;

	// Outputs
	logic [15:0] led_o;
	logic [7:0] hex_seg_left;
	logic [3:0] hex_grid_left;
	logic [7:0] hex_seg_right;
	logic [3:0] hex_grid_right;

	// Internal signals for monitoring
	logic [15:0] stateOutput;
	logic [15:0] mainBusOutput;
	logic [15:0] MAROutput;
	logic [15:0] MDROutput;
	logic [15:0] PCOutput;
	logic [15:0] IROutput;
	logic [15:0] SR1Output;
	logic [15:0] mem_addr;
	logic [15:0] mem_wdata;
	logic mem_wr_ena;
	logic mem_mem_ena;
	logic [15:0] mem_rdata;
	logic memoryReadyCounter;

	// Instantiate the Unit Under Test (UUT)
	processor_top uut (
		.clk(clk),
		.reset(reset),
		.run_i(run_i),
		.continue_i(continue_i),
		.sw_i(sw_i),
		.led_o(led_o),
		.hex_seg_left(hex_seg_left),
		.hex_grid_left(hex_grid_left),
		.hex_seg_right(hex_seg_right),
		.hex_grid_right(hex_grid_right)
	);

	// Clock generation (50 MHz, period = 20ns)
	initial begin
		clk = 0;
		forever #10 clk = ~clk;  // 20ns clock period
	end

	// Stimulus
	initial begin
		// Initialize Inputs
		reset = 1;
		run_i = 0;
		continue_i = 0;
		sw_i = 16'h009c;
		#200;
		reset = 0;
        #500;
        reset = 1;
        #200;
        reset = 0;
        #300;
        run_i = 1;
        #200;
        run_i = 0;
		// Wait 100ns for global reset
		
		#1000;
		// Begin Continue signal toggling for 10 iterations
		repeat (10) begin
			// Assert continue for 20 clock cycles (20*20ns = 400ns)
			continue_i = 1;
			#200;

			// Deassert continue for 40 clock cycles (40*20ns = 800ns)
			continue_i = 0;
			#800;
		end

		// End the simulation
		$stop;
	end

	// Assign internal signals to top-level variables for waveform viewing
	always_comb begin
		stateOutput        = uut.slc3.cpu.stateOutput;
		mainBusOutput      = uut.slc3.cpu.mainBusOutput;
		MAROutput          = uut.slc3.cpu.MAROutput;
		MDROutput          = uut.slc3.cpu.MDROutput;
		PCOutput           = uut.slc3.cpu.PCOutput;
		IROutput           = uut.slc3.cpu.IROutput;
		SR1Output          = uut.slc3.cpu.SR1Output;
		mem_addr           = uut.slc3.cpu.mem_addr;
		mem_wdata          = uut.slc3.cpu.mem_wdata;
		mem_wr_ena         = uut.slc3.cpu.mem_wr_ena;
		mem_mem_ena        = uut.slc3.cpu.mem_mem_ena;
		mem_rdata          = uut.slc3.cpu.mem_rdata;
		memoryReadyCounter = uut.slc3.cpu.memoryReadyCounter;
	end

endmodule
